name: Deploy to Docker Hub to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push crear microservice
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/crear:${{ github.sha }} ./crear
          docker push ${{ secrets.DOCKER_USERNAME }}/crear:${{ github.sha }}

      - name: Build and push leer microservice
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/leer:${{ github.sha }} ./leer
          docker push ${{ secrets.DOCKER_USERNAME }}/leer:${{ github.sha }}

      - name: Build and push actualizar microservice
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/actualizar:${{ github.sha }} ./actualizar
          docker push ${{ secrets.DOCKER_USERNAME }}/actualizar:${{ github.sha }}

      - name: Build and push eliminar microservice
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/eliminar:${{ github.sha }} ./eliminar
          docker push ${{ secrets.DOCKER_USERNAME }}/eliminar:${{ github.sha }}

      - name: Deploy to EC2
        run: |
          # Asegurarse de que Docker esté instalado en EC2
          ssh -o StrictHostKeyChecking=no -i ${{ secrets.EC2_SSH_KEY }} ubuntu@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
            sudo apt-get update
            sudo apt-get install -y docker.io
          EOF

          # Desplegar los contenedores
          ssh -o StrictHostKeyChecking=no -i ${{ secrets.EC2_SSH_KEY }} ubuntu@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
            set -e  # Detener la ejecución si algún comando falla
            
            # Pull de las imágenes más recientes
            docker pull ${{ secrets.DOCKER_USERNAME }}/crear:${{ github.sha }}
            docker pull ${{ secrets.DOCKER_USERNAME }}/leer:${{ github.sha }}
            docker pull ${{ secrets.DOCKER_USERNAME }}/actualizar:${{ github.sha }}
            docker pull ${{ secrets.DOCKER_USERNAME }}/eliminar:${{ github.sha }}

            # Ejecutar contenedores en segundo plano con puertos
            docker run -d --restart unless-stopped --name crear -p 5000:5000 ${{ secrets.DOCKER_USERNAME }}/crear:${{ github.sha }}
            docker run -d --restart unless-stopped --name leer -p 5001:5001 ${{ secrets.DOCKER_USERNAME }}/leer:${{ github.sha }}
            docker run -d --restart unless-stopped --name actualizar -p 5002:5002 ${{ secrets.DOCKER_USERNAME }}/actualizar:${{ github.sha }}
            docker run -d --restart unless-stopped --name eliminar -p 5003:5003 ${{ secrets.DOCKER_USERNAME }}/eliminar:${{ github.sha }}
          EOF
